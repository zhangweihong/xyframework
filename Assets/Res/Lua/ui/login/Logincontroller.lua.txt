Logincontroller = BaseController.new()
--当前的数据模型 禁止直接外部调用 想要里面的数据 写调用方法
Logincontroller._m = nil
--当前的view 禁止外部直接调用 想要里面的东西 自己方法
Logincontroller._v = nil
--属于当前view的子view等
Logincontroller.otherviews = nil

--初始化使用
function Logincontroller.init()
    Logincontroller.super.init()
end

--注册数据模型
function Logincontroller.registermodel(model)
    Logincontroller.super.registermodel(model)
    Logincontroller._m = model
end

--刷新模型
function Logincontroller.refreshmodel(model)
    Logincontroller.super.refreshmodel(model)
    Logincontroller._m = model
end

--注册view
function Logincontroller.registerview(view)
    Logincontroller.super.registerview(view)
    Logincontroller._v = view
    Logincontroller._v.openviewfun = Logincontroller.openviewfun
    Logincontroller._v.closeviewfun = Logincontroller.closeviewfun
    Logincontroller._v.destroyfun = Logincontroller.destroyfun
end

--注册其他子view
function Logincontroller.registerotherview(key, view)
    if Logincontroller.otherviews == nil then
        Logincontroller.otherviews = {}
    end
    Logincontroller.otherviews[key] = view
end

function Logincontroller.openviewfun()
end

function Logincontroller.closeviewfun()
end

function Logincontroller.destroyfun()
    if Logincontroller.unload ~= nil then
        Logincontroller.unload()
    end
end

--清除(如 数据，view的一些基本设置)
function Logincontroller.clear()
    Logincontroller.super.clear()
end

--真实卸载
function Logincontroller.unload()
    Logincontroller.super.unload()
    Logincontroller.clear()
    Logincontroller._m.clear()
    Logincontroller._v.unload()
    if Logincontroller.otherviews ~= nil then
        for k, v in pairs(Logincontroller.otherviews) do
            v.unload()
        end
    end
    Logincontroller.otherviews = nil
    Logincontroller._v = nil
    Logincontroller._m = nil
    ResourcesManager.I:UnLoadAssetBundleAsset(Logincontroller.abname, Logincontroller.assetname)
end

return Logincontroller
